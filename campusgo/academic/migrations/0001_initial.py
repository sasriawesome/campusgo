# Generated by Django 2.2.10 on 2020-04-12 11:32

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_abstracts.academics.enums
import modelcluster.fields
import mptt.fields
import uuid
import wagtail.search.index


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('reg_number', models.PositiveIntegerField(blank=True, editable=False, null=True, verbose_name='Reg number')),
                ('inner_id', models.CharField(blank=True, editable=False, max_length=50, null=True, unique=True, verbose_name='Inner ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='created at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('old_code', models.CharField(blank=True, help_text='Maintain legacy system data integrity', max_length=256, null=True, verbose_name='old code')),
                ('name', models.CharField(max_length=256, verbose_name='name')),
                ('teaching_method', models.CharField(max_length=256, verbose_name='teaching method')),
                ('level', models.CharField(choices=[(0, 'SD'), (1, 'SMP'), (2, 'SMA'), (3, 'D1'), (4, 'D2'), (5, 'D3'), (6, 'D4'), (7, 'S1'), (8, 'S2'), (9, 'S3')], default=7, max_length=3, verbose_name='level')),
                ('year_offered', models.PositiveIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4')], default=1, verbose_name='year offered')),
                ('description', models.TextField(blank=True, max_length=10000, null=True, verbose_name='description')),
                ('has_lpu', models.BooleanField(default=True, help_text='Lecture Program Unit a.k.a SAP', verbose_name='has LPU')),
                ('has_dictate', models.BooleanField(default=True, verbose_name='has dictate')),
                ('has_teaching_material', models.BooleanField(default=True, verbose_name='has teaching material')),
                ('has_practice_program', models.BooleanField(default=True, verbose_name='has practice program')),
                ('is_active', models.BooleanField(default=True, verbose_name='active status')),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
                'ordering': ('inner_id',),
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='CourseGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('code', models.PositiveIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9')], default=1, unique=True, verbose_name='Code')),
                ('name', models.CharField(max_length=512, verbose_name='Name')),
                ('alias', models.CharField(blank=True, max_length=512, null=True, verbose_name='Alias')),
            ],
            options={
                'verbose_name': 'Course Group',
                'verbose_name_plural': 'Course Groups',
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='CourseType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('code', models.PositiveIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9')], default=1, unique=True, verbose_name='code')),
                ('name', models.CharField(max_length=512, verbose_name='name')),
                ('alias', models.CharField(blank=True, max_length=512, null=True, verbose_name='alias')),
            ],
            options={
                'verbose_name': 'course yype',
                'verbose_name_plural': 'course types',
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='Curriculum',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('code', models.CharField(max_length=256, unique=True, verbose_name='code')),
                ('year', models.CharField(choices=[('2010', '2010'), ('2011', '2011'), ('2012', '2012'), ('2013', '2013'), ('2014', '2014'), ('2015', '2015'), ('2016', '2016'), ('2017', '2017'), ('2018', '2018'), ('2019', '2019'), ('2020', '2020'), ('2021', '2021'), ('2022', '2022'), ('2023', '2023'), ('2024', '2024'), ('2025', '2025'), ('2026', '2026'), ('2027', '2027'), ('2028', '2028'), ('2029', '2029')], default='2019', max_length=4, verbose_name='year')),
                ('name', models.CharField(max_length=256, verbose_name='name')),
                ('sks_graduate', models.PositiveIntegerField(default=0, verbose_name='SKS graduate')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
            ],
            options={
                'verbose_name': 'Curriculum',
                'verbose_name_plural': 'Curriculums',
            },
        ),
        migrations.CreateModel(
            name='SchoolYear',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('code', models.CharField(editable=False, max_length=256, unique=True, verbose_name='code')),
                ('year_start', models.IntegerField(choices=[(2010, '2010'), (2011, '2011'), (2012, '2012'), (2013, '2013'), (2014, '2014'), (2015, '2015'), (2016, '2016'), (2017, '2017'), (2018, '2018'), (2019, '2019'), (2020, '2020'), (2021, '2021'), (2022, '2022'), (2023, '2023'), (2024, '2024'), (2025, '2025'), (2026, '2026'), (2027, '2027'), (2028, '2028'), (2029, '2029')], default=2019, verbose_name='year start')),
                ('year_end', models.IntegerField(choices=[(2010, '2010'), (2011, '2011'), (2012, '2012'), (2013, '2013'), (2014, '2014'), (2015, '2015'), (2016, '2016'), (2017, '2017'), (2018, '2018'), (2019, '2019'), (2020, '2020'), (2021, '2021'), (2022, '2022'), (2023, '2023'), (2024, '2024'), (2025, '2025'), (2026, '2026'), (2027, '2027'), (2028, '2028'), (2029, '2029')], default=2020, verbose_name='year end')),
            ],
            options={
                'verbose_name': 'school year',
                'verbose_name_plural': 'school years',
            },
        ),
        migrations.CreateModel(
            name='ManagementUnit',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('type', models.IntegerField(choices=[(1, 'University'), (2, 'Faculty'), (3, 'Major'), (4, 'Program Study')], default=1, verbose_name='type')),
                ('code', models.SlugField(max_length=3, unique=True, verbose_name='code')),
                ('name', models.CharField(max_length=256, verbose_name='name')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='childrens', to='campusgo_academic.ManagementUnit', verbose_name='parent')),
            ],
            options={
                'verbose_name': 'management unit',
                'verbose_name_plural': 'management units',
            },
        ),
        migrations.CreateModel(
            name='CurriculumCourse',
            fields=[
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('semester_number', models.PositiveIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8')], default=1, verbose_name='semester')),
                ('semester_type', models.PositiveIntegerField(choices=[(1, 'Odd'), (2, 'Even'), (3, 'Short')], default=django_abstracts.academics.enums.Semester(1), verbose_name='Semester Type')),
                ('sks_meeting', models.PositiveIntegerField(default=0, verbose_name='SKS meeting')),
                ('sks_practice', models.PositiveIntegerField(default=0, verbose_name='SKS practice')),
                ('sks_field_practice', models.PositiveIntegerField(default=0, verbose_name='SKS field')),
                ('sks_simulation', models.PositiveIntegerField(default=0, verbose_name='SKS simulation')),
                ('sks_total', models.PositiveIntegerField(default=0, editable=False, verbose_name='SKS total')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='curriculum_courses', to='campusgo_academic.Course', verbose_name='course')),
                ('curriculum', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='curriculum_courses', to='campusgo_academic.Curriculum', verbose_name='curriculum')),
            ],
            options={
                'verbose_name': 'curricullum course',
                'verbose_name_plural': 'curricullum courses',
                'ordering': ('curriculum', 'semester_number'),
                'unique_together': {('curriculum', 'course')},
            },
        ),
        migrations.AddField(
            model_name='curriculum',
            name='rmu',
            field=mptt.fields.TreeForeignKey(help_text='Management Unit', limit_choices_to={'type': 4}, on_delete=django.db.models.deletion.PROTECT, related_name='curriculums', to='campusgo_academic.ManagementUnit', verbose_name='Program Study'),
        ),
        migrations.CreateModel(
            name='CourseRequisite',
            fields=[
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('score', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E')], default='C', max_length=2, verbose_name='min graduated score')),
                ('course', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='requisites', to='campusgo_academic.Course', verbose_name='course')),
                ('requisite', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prerequisites', to='campusgo_academic.Course', verbose_name='requisite')),
            ],
            options={
                'verbose_name': 'Course prerequisite',
                'verbose_name_plural': 'Course prerequisite',
            },
        ),
        migrations.AddField(
            model_name='course',
            name='course_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='courses', to='campusgo_academic.CourseGroup', verbose_name='course group'),
        ),
        migrations.AddField(
            model_name='course',
            name='course_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='courses', to='campusgo_academic.CourseType', verbose_name='course type'),
        ),
        migrations.AddField(
            model_name='course',
            name='rmu',
            field=mptt.fields.TreeForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='courses', to='campusgo_academic.ManagementUnit', verbose_name='management unit'),
        ),
        migrations.CreateModel(
            name='AcademicYear',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('code', models.CharField(editable=False, max_length=256, unique=True, verbose_name='code')),
                ('semester', models.PositiveIntegerField(choices=[(1, 'Odd'), (2, 'Even'), (3, 'Short')], default=1, verbose_name='semester')),
                ('date_start', models.DateField(verbose_name='date start')),
                ('date_end', models.DateField(verbose_name='date end')),
                ('school_year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='campusgo_academic.SchoolYear', verbose_name='school year')),
            ],
            options={
                'verbose_name': 'academic year',
                'verbose_name_plural': 'academic years',
            },
        ),
        migrations.CreateModel(
            name='CourseEqualizer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('sks_old_course', models.IntegerField(verbose_name='SKS old')),
                ('sks_new_course', models.IntegerField(verbose_name='SKS new')),
                ('new_course', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='new_equalizers', to='campusgo_academic.CurriculumCourse', verbose_name='New Course')),
                ('old_course', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='old_equalizers', to='campusgo_academic.CurriculumCourse', verbose_name='old course')),
            ],
            options={
                'verbose_name': 'course equalizer',
                'verbose_name_plural': 'course equalizers',
                'unique_together': {('old_course', 'new_course')},
            },
        ),
    ]
