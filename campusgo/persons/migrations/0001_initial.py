# Generated by Django 2.2.10 on 2020-04-12 09:50

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import modelcluster.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0045_assign_unlock_grouppagepermission'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('facebook', models.URLField(blank=True, help_text='Facebook page URL', null=True)),
                ('twitter', models.CharField(blank=True, help_text='Twitter username, without the @', max_length=255, null=True)),
                ('instagram', models.CharField(blank=True, help_text='Instagram username, without the @', max_length=255, null=True)),
                ('youtube', models.URLField(blank=True, help_text='Youtube channel or user account URL', null=True)),
                ('show_title', models.BooleanField(default=False, help_text='Show Mr or Mrs in front of name', verbose_name='show title')),
                ('show_name_only', models.BooleanField(default=False, help_text='Show name only without academic title', verbose_name='show name only')),
                ('title', models.CharField(blank=True, max_length=256, null=True, verbose_name='title')),
                ('front_title', models.CharField(blank=True, help_text='Academic title prefix, eg: Dr or Prof. Dr', max_length=256, null=True, verbose_name='front title')),
                ('back_title', models.CharField(blank=True, help_text='Academic title suffix, eg: Phd', max_length=256, null=True, verbose_name='back title')),
                ('pid', models.CharField(blank=True, help_text='Personal Identifier Number', max_length=256, null=True, verbose_name='PID')),
                ('fullname', models.CharField(max_length=256, verbose_name='full name')),
                ('nickname', models.CharField(blank=True, max_length=256, null=True, verbose_name='nick name')),
                ('gender', models.CharField(choices=[('M', 'male'), ('F', 'female')], default='M', max_length=1, verbose_name='gender')),
                ('religion', models.CharField(blank=True, max_length=255, null=True, verbose_name='religion')),
                ('nation', models.CharField(blank=True, max_length=255, null=True, verbose_name='nation')),
                ('date_of_birth', models.DateField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='date of birth')),
                ('place_of_birth', models.CharField(blank=True, max_length=255, null=True, verbose_name='place of birth')),
                ('last_education_level', models.CharField(choices=[('0', 'SD'), ('1', 'SMP'), ('2', 'SMA'), ('3', 'D1'), ('4', 'D2'), ('5', 'D3'), ('6', 'D4'), ('7', 'S1'), ('8', 'S2'), ('9', 'S3'), ("((0, 'SD'), (1, 'SMP'), (2, 'SMA'), (3, 'D1'), (4, 'D2'), (5, 'D3'), (6, 'D4'), (7, 'S1'), (8, 'S2'), (9, 'S3'))", 'CHOICES')], default=2, max_length=5, verbose_name='Level')),
                ('last_education_institution', models.CharField(blank=True, max_length=256, null=True, verbose_name='Institution')),
                ('last_education_name', models.CharField(blank=True, max_length=256, null=True, verbose_name='Major')),
                ('year_graduate', models.CharField(blank=True, max_length=256, null=True, verbose_name='year graduate')),
                ('is_employee_applicant', models.BooleanField(default=False, verbose_name='employee applicant')),
                ('is_partner_applicant', models.BooleanField(default=False, verbose_name='partner applicant')),
                ('is_teacher_applicant', models.BooleanField(default=False, verbose_name='teacher applicant')),
                ('is_matriculant', models.BooleanField(default=False, verbose_name='matriculant')),
                ('account', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='account')),
            ],
            options={
                'verbose_name': 'Person',
                'verbose_name_plural': 'Persons',
                'permissions': (('export_person', 'Can export Person'), ('import_person', 'Can import Person'), ('change_status_person', 'Can change status Person')),
            },
        ),
        migrations.CreateModel(
            name='Working',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('name', models.CharField(max_length=50, verbose_name='name')),
                ('institution', models.CharField(max_length=256, verbose_name='institution')),
                ('date_start', models.DateField(default=django.utils.timezone.now, verbose_name='date start')),
                ('date_end', models.DateField(default=django.utils.timezone.now, verbose_name='date end')),
                ('status', models.CharField(choices=[('FNS', 'finished'), ('ONG', 'ongoing'), ('UNF', 'unfinished')], default='ONG', max_length=5, verbose_name='current status')),
                ('document_link', models.URLField(blank=True, help_text='Provide support document link', null=True, verbose_name='document link')),
                ('department', models.CharField(max_length=256, verbose_name='department')),
                ('position', models.CharField(max_length=256, verbose_name='position')),
                ('description', models.TextField(blank=True, max_length=256, null=True, verbose_name='description')),
                ('employment', models.CharField(choices=[('CTR', 'contract'), ('FXD', 'fixed'), ('OSR', 'outsource'), ('ELS', 'else')], default='CTR', max_length=5, verbose_name='employment')),
                ('person', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='work_histories', to='campusgo_persons.Person')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Volunteer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('organization', models.CharField(max_length=256, verbose_name='organization')),
                ('position', models.CharField(max_length=256, verbose_name='position')),
                ('description', models.CharField(max_length=256, verbose_name='description')),
                ('date_start', models.DateField(default=django.utils.timezone.now, verbose_name='date start')),
                ('date_end', models.DateField(default=django.utils.timezone.now, verbose_name='date end')),
                ('status', models.CharField(choices=[('ACT', 'active'), ('INC', 'inactive')], default='ACT', max_length=5, verbose_name='status')),
                ('document_link', models.URLField(blank=True, help_text='Provide support document link', null=True, verbose_name='document link')),
                ('person', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='volunteers', to='campusgo_persons.Person')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SocialMedia',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('facebook', models.URLField(blank=True, help_text='Facebook page URL', null=True)),
                ('twitter', models.CharField(blank=True, help_text='Twitter username, without the @', max_length=255, null=True)),
                ('instagram', models.CharField(blank=True, help_text='Instagram username, without the @', max_length=255, null=True)),
                ('youtube', models.URLField(blank=True, help_text='Youtube channel or user account URL', null=True)),
                ('person', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_media', to='campusgo_persons.Person')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('name', models.CharField(max_length=256, verbose_name='name')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='description')),
                ('level', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Skill level')),
                ('person', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='campusgo_persons.Person')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('title', models.CharField(max_length=256, verbose_name='title')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='description')),
                ('publisher', models.CharField(blank=True, max_length=256, null=True, verbose_name='publisher')),
                ('date_published', models.DateField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='published date')),
                ('document_link', models.URLField(blank=True, help_text='provide support document link', null=True, verbose_name='document link')),
                ('person', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='publications', to='campusgo_persons.Person')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PersonSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('show_histories_tab', models.BooleanField(default=True, help_text='Show formal person histories tab', verbose_name='Show histories tab')),
                ('show_formal_education_history', models.BooleanField(default=True, help_text='Show formal education histories panel', verbose_name='Show formal education')),
                ('show_nonformal_education_history', models.BooleanField(default=True, help_text='Show non formal education histories panel', verbose_name='Show non formal education')),
                ('show_working_history', models.BooleanField(default=True, help_text='Show working histories panel', verbose_name='Show working experience')),
                ('show_organization_history', models.BooleanField(default=True, help_text='Show organization histories panel', verbose_name='Show organization experience')),
                ('show_skill', models.BooleanField(default=True, help_text='Show skills panel', verbose_name='Show skill')),
                ('show_award', models.BooleanField(default=True, help_text='Show awards panel', verbose_name='Show award')),
                ('show_publication', models.BooleanField(default=True, help_text='Show publications panel', verbose_name='Show publication')),
                ('show_family', models.BooleanField(default=True, help_text='Show family or relationship tab', verbose_name='Show family tab')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site')),
            ],
            options={
                'verbose_name': 'Person Setting',
                'verbose_name_plural': 'Person Settings',
            },
        ),
        migrations.CreateModel(
            name='PersonContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('phone', models.CharField(blank=True, max_length=128, null=True, verbose_name='phone')),
                ('fax', models.CharField(blank=True, max_length=128, null=True, verbose_name='fax')),
                ('whatsapp', models.CharField(blank=True, max_length=128, null=True, verbose_name='whatsapp')),
                ('email', models.EmailField(blank=True, max_length=128, null=True, verbose_name='email')),
                ('website', models.CharField(blank=True, max_length=128, null=True, verbose_name='website')),
                ('person', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='contact', to='campusgo_persons.Person')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PersonAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('is_primary', models.BooleanField(default=True, verbose_name='primary')),
                ('name', models.CharField(help_text='E.g. Home Address or Office Address', max_length=256, null=True, verbose_name='name')),
                ('street', models.CharField(blank=True, max_length=512, null=True, verbose_name='street')),
                ('city', models.CharField(blank=True, max_length=128, null=True, verbose_name='city')),
                ('province', models.CharField(blank=True, max_length=128, null=True, verbose_name='province')),
                ('country', models.CharField(blank=True, max_length=128, null=True, verbose_name='country')),
                ('zipcode', models.CharField(blank=True, max_length=128, null=True, verbose_name='zip code')),
                ('person', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='campusgo_persons.Person')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NonFormalEducation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('name', models.CharField(max_length=50, verbose_name='name')),
                ('institution', models.CharField(max_length=256, verbose_name='institution')),
                ('date_start', models.DateField(default=django.utils.timezone.now, verbose_name='date start')),
                ('date_end', models.DateField(default=django.utils.timezone.now, verbose_name='date end')),
                ('status', models.CharField(choices=[('FNS', 'finished'), ('ONG', 'ongoing'), ('UNF', 'unfinished')], default='ONG', max_length=5, verbose_name='current status')),
                ('document_link', models.URLField(blank=True, help_text='Provide support document link', null=True, verbose_name='document link')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='description')),
                ('person', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='non_formal_educations', to='campusgo_persons.Person')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FormalEducation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('name', models.CharField(max_length=50, verbose_name='name')),
                ('institution', models.CharField(max_length=256, verbose_name='institution')),
                ('date_start', models.DateField(default=django.utils.timezone.now, verbose_name='date start')),
                ('date_end', models.DateField(default=django.utils.timezone.now, verbose_name='date end')),
                ('status', models.CharField(choices=[('FNS', 'finished'), ('ONG', 'ongoing'), ('UNF', 'unfinished')], default='ONG', max_length=5, verbose_name='current status')),
                ('document_link', models.URLField(blank=True, help_text='Provide support document link', null=True, verbose_name='document link')),
                ('major', models.CharField(blank=True, help_text='ex: Information System or Accounting', max_length=256, null=True, verbose_name='major')),
                ('level', models.CharField(choices=[(0, 'SD'), (1, 'SMP'), (2, 'SMA'), (3, 'D1'), (4, 'D2'), (5, 'D3'), (6, 'D4'), (7, 'S1'), (8, 'S2'), (9, 'S3')], default=7, max_length=3, verbose_name='level')),
                ('person', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='formal_educations', to='campusgo_persons.Person')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Family',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('relation', models.PositiveIntegerField(choices=[(1, 'father'), (2, 'mother'), (5, 'husband'), (6, 'wife'), (4, 'children'), (3, 'sibling'), (99, 'other')], default=99, verbose_name='relation')),
                ('relationship', models.CharField(blank=True, max_length=256, null=True, verbose_name='other relation')),
                ('name', models.CharField(max_length=256, verbose_name='name')),
                ('date_of_birth', models.DateField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='date of birth')),
                ('place_of_birth', models.CharField(blank=True, max_length=255, null=True, verbose_name='place of birth')),
                ('job', models.CharField(max_length=256, verbose_name='job')),
                ('address', models.TextField(blank=True, max_length=512, null=True, verbose_name='address')),
                ('person', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='families', to='campusgo_persons.Person')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Award',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('name', models.CharField(max_length=256, verbose_name='name')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='description')),
                ('date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='created date')),
                ('document_link', models.URLField(blank=True, help_text='Provide support document link', null=True, verbose_name='document link')),
                ('person', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='awards', to='campusgo_persons.Person')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
    ]
