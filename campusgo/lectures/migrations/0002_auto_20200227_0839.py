# Generated by Django 2.2.10 on 2020-02-27 01:39

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import modelcluster.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('campusgo_rooms', '0001_initial'),
        ('campusgo_students', '0001_initial'),
        ('campusgo_lectures', '0001_initial'),
        ('campusgo_academic', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='LectureStudent',
            fields=[
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('is_deleted', models.BooleanField(default=False, editable=False, verbose_name='is deleted?')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('status', models.CharField(choices=[('N', 'New'), ('R', 'Repeat')], default='N', max_length=3, verbose_name='Status')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lecturestudent_creator', to=settings.AUTH_USER_MODEL, verbose_name='creator')),
                ('deleted_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lecturestudent_deleter', to=settings.AUTH_USER_MODEL, verbose_name='deleter')),
                ('lecture', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='campusgo_lectures.Lecture', verbose_name='Lecture')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lectures', to='campusgo_students.Student', verbose_name='Student')),
            ],
            options={
                'verbose_name': 'Lecture Student',
                'verbose_name_plural': 'Lecture Students',
            },
        ),
        migrations.CreateModel(
            name='LectureScoreWeighting',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('is_deleted', models.BooleanField(default=False, editable=False, verbose_name='is deleted?')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('attendance', models.PositiveIntegerField(default=15, verbose_name='Attendance')),
                ('homework1', models.PositiveIntegerField(default=10, verbose_name='Homework 1')),
                ('homework2', models.PositiveIntegerField(default=10, verbose_name='Homework 2')),
                ('quis1', models.PositiveIntegerField(default=10, verbose_name='Quis 1')),
                ('quis2', models.PositiveIntegerField(default=10, verbose_name='Quis 2')),
                ('mid_exam', models.PositiveIntegerField(default=20, verbose_name='Mid Exam')),
                ('final_exam', models.PositiveIntegerField(default=25, verbose_name='Final Exam')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lecturescoreweighting_creator', to=settings.AUTH_USER_MODEL, verbose_name='creator')),
                ('deleted_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lecturescoreweighting_deleter', to=settings.AUTH_USER_MODEL, verbose_name='deleter')),
                ('lecture', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='campusgo_lectures.Lecture', verbose_name='Lecture')),
            ],
            options={
                'verbose_name': 'Lecture Score Weighting',
                'verbose_name_plural': 'Lecture Score Weightings',
            },
        ),
        migrations.CreateModel(
            name='LectureScore',
            fields=[
                ('studentscore_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='campusgo_students.StudentScore')),
                ('attendance', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Attendance')),
                ('homework1', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Homework 1')),
                ('homework2', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Homework 2')),
                ('quis1', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Quis 1')),
                ('quis2', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Quis 2')),
                ('mid_exam', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Mid Exam')),
                ('final_exam', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Final Exam')),
                ('total_score', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Total Score')),
                ('lecture', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='campusgo_lectures.Lecture', verbose_name='Lecture')),
            ],
            options={
                'verbose_name': 'Lecture Score',
                'verbose_name_plural': 'Lecture Scores',
            },
            bases=('campusgo_students.studentscore',),
        ),
        migrations.AddField(
            model_name='lectureschedule',
            name='created_by',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lectureschedule_creator', to=settings.AUTH_USER_MODEL, verbose_name='creator'),
        ),
        migrations.AddField(
            model_name='lectureschedule',
            name='deleted_by',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lectureschedule_deleter', to=settings.AUTH_USER_MODEL, verbose_name='deleter'),
        ),
        migrations.AddField(
            model_name='lectureschedule',
            name='lecture',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campusgo_lectures.Lecture', verbose_name='Lecture'),
        ),
        migrations.AddField(
            model_name='lectureschedule',
            name='room',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='campusgo_rooms.Room', verbose_name='Room Name'),
        ),
        migrations.AddField(
            model_name='lecture',
            name='academic_year',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='campusgo_academic.AcademicYear', verbose_name='Academic Year'),
        ),
    ]
